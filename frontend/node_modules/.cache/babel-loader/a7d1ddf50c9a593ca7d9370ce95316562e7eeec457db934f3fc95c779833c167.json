{"ast":null,"code":"const API_USERNAME = \"YOUR_USERNAME\";\nconst API_PASSWORD = \"YOUR_PASSWORD\";\nconst AUTH_URL = \"https://sandbox-authservice.priaid.ch/login\"; // sandbox URL\nconst BASE_URL = \"https://sandbox-healthservice.priaid.ch\"; // sandbox URL\n\n// Get token\nconst getToken = async () => {\n  try {\n    const response = await fetch(AUTH_URL, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + btoa(API_USERNAME + \":\" + API_PASSWORD)\n      }\n    });\n    const data = await response.json();\n    return data.Token;\n  } catch (error) {\n    console.error(\"Error getting token:\", error);\n    throw error;\n  }\n};\nexport const medicApi = {\n  // Get list of all symptoms\n  getSymptoms: async () => {\n    try {\n      const token = await getToken();\n      const response = await fetch(`${BASE_URL}/symptoms?token=${token}&format=json&language=en-gb`);\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error fetching symptoms:\", error);\n      throw error;\n    }\n  },\n  // Diagnose based on symptoms\n  getDiagnosis: async (symptoms, gender, birthYear) => {\n    try {\n      const token = await getToken();\n      const response = await fetch(`${BASE_URL}/diagnosis?symptoms=${JSON.stringify(symptoms)}` + `&gender=${gender}&year_of_birth=${birthYear}&token=${token}&format=json&language=en-gb`);\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error getting diagnosis:\", error);\n      throw error;\n    }\n  },\n  // Get issue info\n  getIssueInfo: async issueId => {\n    try {\n      const token = await getToken();\n      const response = await fetch(`${BASE_URL}/issues/${issueId}/info?token=${token}&format=json&language=en-gb`);\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error getting issue info:\", error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["API_USERNAME","API_PASSWORD","AUTH_URL","BASE_URL","getToken","response","fetch","method","headers","Authorization","btoa","data","json","Token","error","console","medicApi","getSymptoms","token","getDiagnosis","symptoms","gender","birthYear","JSON","stringify","getIssueInfo","issueId"],"sources":["/Users/diegogomez/mern-auth copy/frontend/src/services/medicApi.js"],"sourcesContent":["const API_USERNAME = \"YOUR_USERNAME\";\nconst API_PASSWORD = \"YOUR_PASSWORD\";\nconst AUTH_URL = \"https://sandbox-authservice.priaid.ch/login\"; // sandbox URL\nconst BASE_URL = \"https://sandbox-healthservice.priaid.ch\"; // sandbox URL\n\n// Get token\nconst getToken = async () => {\n  try {\n    const response = await fetch(AUTH_URL, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + btoa(API_USERNAME + \":\" + API_PASSWORD),\n      },\n    });\n    const data = await response.json();\n    return data.Token;\n  } catch (error) {\n    console.error(\"Error getting token:\", error);\n    throw error;\n  }\n};\n\nexport const medicApi = {\n  // Get list of all symptoms\n  getSymptoms: async () => {\n    try {\n      const token = await getToken();\n      const response = await fetch(\n        `${BASE_URL}/symptoms?token=${token}&format=json&language=en-gb`\n      );\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error fetching symptoms:\", error);\n      throw error;\n    }\n  },\n\n  // Diagnose based on symptoms\n  getDiagnosis: async (symptoms, gender, birthYear) => {\n    try {\n      const token = await getToken();\n      const response = await fetch(\n        `${BASE_URL}/diagnosis?symptoms=${JSON.stringify(symptoms)}` +\n          `&gender=${gender}&year_of_birth=${birthYear}&token=${token}&format=json&language=en-gb`\n      );\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error getting diagnosis:\", error);\n      throw error;\n    }\n  },\n\n  // Get issue info\n  getIssueInfo: async (issueId) => {\n    try {\n      const token = await getToken();\n      const response = await fetch(\n        `${BASE_URL}/issues/${issueId}/info?token=${token}&format=json&language=en-gb`\n      );\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error getting issue info:\", error);\n      throw error;\n    }\n  },\n};\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,eAAe;AACpC,MAAMC,YAAY,GAAG,eAAe;AACpC,MAAMC,QAAQ,GAAG,6CAA6C,CAAC,CAAC;AAChE,MAAMC,QAAQ,GAAG,yCAAyC,CAAC,CAAC;;AAE5D;AACA,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAC3B,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,QAAQ,EAAE;MACrCK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACPC,aAAa,EAAE,SAAS,GAAGC,IAAI,CAACV,YAAY,GAAG,GAAG,GAAGC,YAAY;MACnE;IACF,CAAC,CAAC;IACF,MAAMU,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACE,KAAK;EACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,QAAQ,GAAG;EACtB;EACAC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,IAAI;MACF,MAAMC,KAAK,GAAG,MAAMd,QAAQ,CAAC,CAAC;MAC9B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,GAAGH,QAAQ,mBAAmBe,KAAK,6BACrC,CAAC;MACD,OAAO,MAAMb,QAAQ,CAACO,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAK,YAAY,EAAE,MAAAA,CAAOC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,KAAK;IACnD,IAAI;MACF,MAAMJ,KAAK,GAAG,MAAMd,QAAQ,CAAC,CAAC;MAC9B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,GAAGH,QAAQ,uBAAuBoB,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAAC,EAAE,GAC1D,WAAWC,MAAM,kBAAkBC,SAAS,UAAUJ,KAAK,6BAC/D,CAAC;MACD,OAAO,MAAMb,QAAQ,CAACO,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAW,YAAY,EAAE,MAAOC,OAAO,IAAK;IAC/B,IAAI;MACF,MAAMR,KAAK,GAAG,MAAMd,QAAQ,CAAC,CAAC;MAC9B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,GAAGH,QAAQ,WAAWuB,OAAO,eAAeR,KAAK,6BACnD,CAAC;MACD,OAAO,MAAMb,QAAQ,CAACO,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}