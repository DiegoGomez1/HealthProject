{"ast":null,"code":"const LIVE_URL = \"https://healthservice.priaid.ch\";\nconst AUTH_URL = \"https://authservice.priaid.ch/login\";\nconst API_KEY = \"YOUR_API_KEY\"; // Replace with your live API key\nconst API_SECRET = \"YOUR_SECRET\"; // Replace with your live API secret\n\nconst getToken = async () => {\n  const hash = btoa(API_KEY + \":\" + API_SECRET);\n  try {\n    const response = await fetch(AUTH_URL, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${hash}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(\"Authentication failed\");\n    }\n    const data = await response.json();\n    return data.Token;\n  } catch (error) {\n    console.error(\"Auth error:\", error);\n    throw error;\n  }\n};\nexport const medicApi = {\n  getSymptoms: async () => {\n    try {\n      const token = await getToken();\n      const response = await fetch(`${LIVE_URL}/symptoms?token=${token}&format=json&language=en-gb`, {\n        headers: {\n          Accept: \"application/json\",\n          \"Cache-Control\": \"no-cache\"\n        }\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch symptoms\");\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error fetching symptoms:\", error);\n      throw error;\n    }\n  },\n  getDiagnosis: async (symptoms, gender, yearOfBirth) => {\n    try {\n      const token = await getToken();\n      const response = await fetch(`${LIVE_URL}/diagnosis?symptoms=${JSON.stringify(symptoms)}&gender=${gender}&year_of_birth=${yearOfBirth}&token=${token}&format=json&language=en-gb`, {\n        headers: {\n          Accept: \"application/json\",\n          \"Cache-Control\": \"no-cache\"\n        }\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to get diagnosis\");\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error getting diagnosis:\", error);\n      throw error;\n    }\n  },\n  getIssueInfo: async issueId => {\n    try {\n      const token = await getToken();\n      const response = await fetch(`${LIVE_URL}/issues/${issueId}/info?token=${token}&format=json&language=en-gb`, {\n        headers: {\n          Accept: \"application/json\",\n          \"Cache-Control\": \"no-cache\"\n        }\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to get issue info\");\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error getting issue info:\", error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["LIVE_URL","AUTH_URL","API_KEY","API_SECRET","getToken","hash","btoa","response","fetch","method","headers","Authorization","ok","Error","data","json","Token","error","console","medicApi","getSymptoms","token","Accept","getDiagnosis","symptoms","gender","yearOfBirth","JSON","stringify","getIssueInfo","issueId"],"sources":["/Users/diegogomez/mern-auth copy/frontend/src/services/medicApi.js"],"sourcesContent":["const LIVE_URL = \"https://healthservice.priaid.ch\";\nconst AUTH_URL = \"https://authservice.priaid.ch/login\";\nconst API_KEY = \"YOUR_API_KEY\"; // Replace with your live API key\nconst API_SECRET = \"YOUR_SECRET\"; // Replace with your live API secret\n\nconst getToken = async () => {\n  const hash = btoa(API_KEY + \":\" + API_SECRET);\n\n  try {\n    const response = await fetch(AUTH_URL, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${hash}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Authentication failed\");\n    }\n\n    const data = await response.json();\n    return data.Token;\n  } catch (error) {\n    console.error(\"Auth error:\", error);\n    throw error;\n  }\n};\n\nexport const medicApi = {\n  getSymptoms: async () => {\n    try {\n      const token = await getToken();\n      const response = await fetch(\n        `${LIVE_URL}/symptoms?token=${token}&format=json&language=en-gb`,\n        {\n          headers: {\n            Accept: \"application/json\",\n            \"Cache-Control\": \"no-cache\",\n          },\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch symptoms\");\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error fetching symptoms:\", error);\n      throw error;\n    }\n  },\n\n  getDiagnosis: async (symptoms, gender, yearOfBirth) => {\n    try {\n      const token = await getToken();\n      const response = await fetch(\n        `${LIVE_URL}/diagnosis?symptoms=${JSON.stringify(\n          symptoms\n        )}&gender=${gender}&year_of_birth=${yearOfBirth}&token=${token}&format=json&language=en-gb`,\n        {\n          headers: {\n            Accept: \"application/json\",\n            \"Cache-Control\": \"no-cache\",\n          },\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Failed to get diagnosis\");\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error getting diagnosis:\", error);\n      throw error;\n    }\n  },\n\n  getIssueInfo: async (issueId) => {\n    try {\n      const token = await getToken();\n      const response = await fetch(\n        `${LIVE_URL}/issues/${issueId}/info?token=${token}&format=json&language=en-gb`,\n        {\n          headers: {\n            Accept: \"application/json\",\n            \"Cache-Control\": \"no-cache\",\n          },\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Failed to get issue info\");\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error getting issue info:\", error);\n      throw error;\n    }\n  },\n};\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,iCAAiC;AAClD,MAAMC,QAAQ,GAAG,qCAAqC;AACtD,MAAMC,OAAO,GAAG,cAAc,CAAC,CAAC;AAChC,MAAMC,UAAU,GAAG,aAAa,CAAC,CAAC;;AAElC,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAC3B,MAAMC,IAAI,GAAGC,IAAI,CAACJ,OAAO,GAAG,GAAG,GAAGC,UAAU,CAAC;EAE7C,IAAI;IACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACP,QAAQ,EAAE;MACrCQ,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUN,IAAI;MAC/B;IACF,CAAC,CAAC;IAEF,IAAI,CAACE,QAAQ,CAACK,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC1C;IAEA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACE,KAAK;EACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;IACnC,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,QAAQ,GAAG;EACtBC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,IAAI;MACF,MAAMC,KAAK,GAAG,MAAMjB,QAAQ,CAAC,CAAC;MAC9B,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAC1B,GAAGR,QAAQ,mBAAmBqB,KAAK,6BAA6B,EAChE;QACEX,OAAO,EAAE;UACPY,MAAM,EAAE,kBAAkB;UAC1B,eAAe,EAAE;QACnB;MACF,CACF,CAAC;MAED,IAAI,CAACf,QAAQ,CAACK,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;MAC7C;MAEA,OAAO,MAAMN,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACb;EACF,CAAC;EAEDM,YAAY,EAAE,MAAAA,CAAOC,QAAQ,EAAEC,MAAM,EAAEC,WAAW,KAAK;IACrD,IAAI;MACF,MAAML,KAAK,GAAG,MAAMjB,QAAQ,CAAC,CAAC;MAC9B,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAC1B,GAAGR,QAAQ,uBAAuB2B,IAAI,CAACC,SAAS,CAC9CJ,QACF,CAAC,WAAWC,MAAM,kBAAkBC,WAAW,UAAUL,KAAK,6BAA6B,EAC3F;QACEX,OAAO,EAAE;UACPY,MAAM,EAAE,kBAAkB;UAC1B,eAAe,EAAE;QACnB;MACF,CACF,CAAC;MAED,IAAI,CAACf,QAAQ,CAACK,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;MAC5C;MAEA,OAAO,MAAMN,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACb;EACF,CAAC;EAEDY,YAAY,EAAE,MAAOC,OAAO,IAAK;IAC/B,IAAI;MACF,MAAMT,KAAK,GAAG,MAAMjB,QAAQ,CAAC,CAAC;MAC9B,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAC1B,GAAGR,QAAQ,WAAW8B,OAAO,eAAeT,KAAK,6BAA6B,EAC9E;QACEX,OAAO,EAAE;UACPY,MAAM,EAAE,kBAAkB;UAC1B,eAAe,EAAE;QACnB;MACF,CACF,CAAC;MAED,IAAI,CAACf,QAAQ,CAACK,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;MAC7C;MAEA,OAAO,MAAMN,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}