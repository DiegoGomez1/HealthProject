{"ast":null,"code":"// medicApi.js\nconst BASE_URL = \"http://localhost:5001/api\";\nexport const medicApi = {\n  getSymptoms: async () => {\n    try {\n      const response = await fetch(`${BASE_URL}/symptoms`, {\n        headers: {\n          Accept: \"application/json\",\n          \"Cache-Control\": \"no-cache\"\n        }\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch symptoms\");\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error fetching symptoms:\", error);\n      throw new Error(\"Failed to fetch symptoms\");\n    }\n  },\n  getDiagnosis: async (symptoms, gender, yearOfBirth) => {\n    try {\n      const response = await fetch(`${BASE_URL}/diagnosis`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          \"Cache-Control\": \"no-cache\"\n        },\n        body: JSON.stringify({\n          symptoms,\n          gender,\n          yearOfBirth\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to get diagnosis\");\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error getting diagnosis:\", error);\n      throw new Error(\"Failed to get diagnosis\");\n    }\n  },\n  getIssueInfo: async issueId => {\n    try {\n      const response = await fetch(`${BASE_URL}/issues/${issueId}`, {\n        headers: {\n          Accept: \"application/json\",\n          \"Cache-Control\": \"no-cache\"\n        }\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to get issue info\");\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error getting issue info:\", error);\n      throw new Error(\"Failed to get issue details\");\n    }\n  }\n};\nexport default medicApi;","map":{"version":3,"names":["BASE_URL","medicApi","getSymptoms","response","fetch","headers","Accept","ok","Error","json","error","console","getDiagnosis","symptoms","gender","yearOfBirth","method","body","JSON","stringify","getIssueInfo","issueId"],"sources":["/Users/diegogomez/mern-auth copy/frontend/src/services/medicApi.js"],"sourcesContent":["// medicApi.js\nconst BASE_URL = \"http://localhost:5001/api\";\n\nexport const medicApi = {\n  getSymptoms: async () => {\n    try {\n      const response = await fetch(`${BASE_URL}/symptoms`, {\n        headers: {\n          Accept: \"application/json\",\n          \"Cache-Control\": \"no-cache\",\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch symptoms\");\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error fetching symptoms:\", error);\n      throw new Error(\"Failed to fetch symptoms\");\n    }\n  },\n\n  getDiagnosis: async (symptoms, gender, yearOfBirth) => {\n    try {\n      const response = await fetch(`${BASE_URL}/diagnosis`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          \"Cache-Control\": \"no-cache\",\n        },\n        body: JSON.stringify({\n          symptoms,\n          gender,\n          yearOfBirth,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to get diagnosis\");\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error getting diagnosis:\", error);\n      throw new Error(\"Failed to get diagnosis\");\n    }\n  },\n\n  getIssueInfo: async (issueId) => {\n    try {\n      const response = await fetch(`${BASE_URL}/issues/${issueId}`, {\n        headers: {\n          Accept: \"application/json\",\n          \"Cache-Control\": \"no-cache\",\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to get issue info\");\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error getting issue info:\", error);\n      throw new Error(\"Failed to get issue details\");\n    }\n  },\n};\n\nexport default medicApi;\n"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAG,2BAA2B;AAE5C,OAAO,MAAMC,QAAQ,GAAG;EACtBC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,WAAW,EAAE;QACnDK,OAAO,EAAE;UACPC,MAAM,EAAE,kBAAkB;UAC1B,eAAe,EAAE;QACnB;MACF,CAAC,CAAC;MAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;MAC7C;MAEA,OAAO,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAM,IAAIF,KAAK,CAAC,0BAA0B,CAAC;IAC7C;EACF,CAAC;EAEDI,YAAY,EAAE,MAAAA,CAAOC,QAAQ,EAAEC,MAAM,EAAEC,WAAW,KAAK;IACrD,IAAI;MACF,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,YAAY,EAAE;QACpDgB,MAAM,EAAE,MAAM;QACdX,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,MAAM,EAAE,kBAAkB;UAC1B,eAAe,EAAE;QACnB,CAAC;QACDW,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBN,QAAQ;UACRC,MAAM;UACNC;QACF,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACZ,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;MAC5C;MAEA,OAAO,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAM,IAAIF,KAAK,CAAC,yBAAyB,CAAC;IAC5C;EACF,CAAC;EAEDY,YAAY,EAAE,MAAOC,OAAO,IAAK;IAC/B,IAAI;MACF,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,WAAWqB,OAAO,EAAE,EAAE;QAC5DhB,OAAO,EAAE;UACPC,MAAM,EAAE,kBAAkB;UAC1B,eAAe,EAAE;QACnB;MACF,CAAC,CAAC;MAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;MAC7C;MAEA,OAAO,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAM,IAAIF,KAAK,CAAC,6BAA6B,CAAC;IAChD;EACF;AACF,CAAC;AAED,eAAeP,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}