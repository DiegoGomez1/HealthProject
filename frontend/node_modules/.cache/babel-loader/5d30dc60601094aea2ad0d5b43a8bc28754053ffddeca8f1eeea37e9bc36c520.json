{"ast":null,"code":"import CryptoJS from \"crypto-js\";\nconst LIVE_URL = \"https://://sandbox-authservice.priaid.ch.priaid.ch\";\nconst AUTH_URL = \"https://sandbox-healthservice.priaid.ch/login\";\n\n// Replace these with environment variables\nconst API_KEY = \"diegogomez1@ufl.edu\";\nconst API_SECRET = \"Cy35Tac8DXi9w4ERp\";\nconst getToken = async () => {\n  try {\n    console.log(\"Attempting to get token...\");\n    if (!AUTH_URL || !API_SECRET) {\n      throw new Error(\"AUTH_URL or API_SECRET is not defined\");\n    }\n    const computedHash = CryptoJS.HmacMD5(AUTH_URL, String(API_SECRET));\n    const computedHashString = computedHash.toString(CryptoJS.enc.Base64);\n    console.log(\"Computed Hash String:\", computedHashString);\n    const response = await fetch(AUTH_URL, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${API_KEY}:${computedHashString}`,\n        \"Content-Type\": \"application/json\"\n      },\n      mode: \"cors\",\n      credentials: \"omit\"\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(\"Authentication failed:\", errorText);\n      throw new Error(`Authentication failed: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log(\"Token received successfully\");\n    return data.Token;\n  } catch (error) {\n    console.error(\"Detailed auth error:\", error);\n    throw error;\n  }\n};\n\n// Exported API object\nexport const medicApi = {\n  getSymptoms: async () => {\n    try {\n      const token = await getToken();\n      const response = await fetch(`${LIVE_URL}/symptoms?token=${token}&format=json&language=en-gb`, {\n        headers: {\n          Accept: \"application/json\",\n          \"Cache-Control\": \"no-cache\"\n        }\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch symptoms\");\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error fetching symptoms:\", error);\n      throw error;\n    }\n  },\n  getDiagnosis: async (symptoms, gender, yearOfBirth) => {\n    try {\n      const token = await getToken();\n      const response = await fetch(`${LIVE_URL}/diagnosis?symptoms=${JSON.stringify(symptoms)}&gender=${gender}&year_of_birth=${yearOfBirth}&token=${token}&format=json&language=en-gb`, {\n        headers: {\n          Accept: \"application/json\",\n          \"Cache-Control\": \"no-cache\"\n        }\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to get diagnosis\");\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error getting diagnosis:\", error);\n      throw error;\n    }\n  },\n  getIssueInfo: async issueId => {\n    try {\n      const token = await getToken();\n      const response = await fetch(`${LIVE_URL}/issues/${issueId}/info?token=${token}&format=json&language=en-gb`, {\n        headers: {\n          Accept: \"application/json\",\n          \"Cache-Control\": \"no-cache\"\n        }\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to get issue info\");\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error getting issue info:\", error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["CryptoJS","LIVE_URL","AUTH_URL","API_KEY","API_SECRET","getToken","console","log","Error","computedHash","HmacMD5","String","computedHashString","toString","enc","Base64","response","fetch","method","headers","Authorization","mode","credentials","ok","errorText","text","error","status","data","json","Token","medicApi","getSymptoms","token","Accept","getDiagnosis","symptoms","gender","yearOfBirth","JSON","stringify","getIssueInfo","issueId"],"sources":["/Users/diegogomez/mern-auth copy/frontend/src/services/medicApi.js"],"sourcesContent":["import CryptoJS from \"crypto-js\";\n\nconst LIVE_URL = \"https://://sandbox-authservice.priaid.ch.priaid.ch\";\nconst AUTH_URL = \"https://sandbox-healthservice.priaid.ch/login\";\n\n// Replace these with environment variables\nconst API_KEY = \"diegogomez1@ufl.edu\";\nconst API_SECRET = \"Cy35Tac8DXi9w4ERp\";\n\nconst getToken = async () => {\n  try {\n    console.log(\"Attempting to get token...\");\n\n    if (!AUTH_URL || !API_SECRET) {\n      throw new Error(\"AUTH_URL or API_SECRET is not defined\");\n    }\n\n    const computedHash = CryptoJS.HmacMD5(AUTH_URL, String(API_SECRET));\n    const computedHashString = computedHash.toString(CryptoJS.enc.Base64);\n    console.log(\"Computed Hash String:\", computedHashString);\n\n    const response = await fetch(AUTH_URL, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${API_KEY}:${computedHashString}`,\n        \"Content-Type\": \"application/json\",\n      },\n      mode: \"cors\",\n      credentials: \"omit\",\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(\"Authentication failed:\", errorText);\n      throw new Error(`Authentication failed: ${response.status}`);\n    }\n\n    const data = await response.json();\n    console.log(\"Token received successfully\");\n    return data.Token;\n  } catch (error) {\n    console.error(\"Detailed auth error:\", error);\n    throw error;\n  }\n};\n\n// Exported API object\nexport const medicApi = {\n  getSymptoms: async () => {\n    try {\n      const token = await getToken();\n      const response = await fetch(\n        `${LIVE_URL}/symptoms?token=${token}&format=json&language=en-gb`,\n        {\n          headers: {\n            Accept: \"application/json\",\n            \"Cache-Control\": \"no-cache\",\n          },\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch symptoms\");\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error fetching symptoms:\", error);\n      throw error;\n    }\n  },\n\n  getDiagnosis: async (symptoms, gender, yearOfBirth) => {\n    try {\n      const token = await getToken();\n      const response = await fetch(\n        `${LIVE_URL}/diagnosis?symptoms=${JSON.stringify(\n          symptoms\n        )}&gender=${gender}&year_of_birth=${yearOfBirth}&token=${token}&format=json&language=en-gb`,\n        {\n          headers: {\n            Accept: \"application/json\",\n            \"Cache-Control\": \"no-cache\",\n          },\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Failed to get diagnosis\");\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error getting diagnosis:\", error);\n      throw error;\n    }\n  },\n\n  getIssueInfo: async (issueId) => {\n    try {\n      const token = await getToken();\n      const response = await fetch(\n        `${LIVE_URL}/issues/${issueId}/info?token=${token}&format=json&language=en-gb`,\n        {\n          headers: {\n            Accept: \"application/json\",\n            \"Cache-Control\": \"no-cache\",\n          },\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Failed to get issue info\");\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error getting issue info:\", error);\n      throw error;\n    }\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}